// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	models "filmlibrary/internal/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// MovieProvider is an autogenerated mock type for the MovieProvider type
type MovieProvider struct {
	mock.Mock
}

// AddActorsToMovie provides a mock function with given fields: movieID, actors
func (_m *MovieProvider) AddActorsToMovie(movieID int64, actors []int64) error {
	ret := _m.Called(movieID, actors)

	if len(ret) == 0 {
		panic("no return value specified for AddActorsToMovie")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, []int64) error); ok {
		r0 = rf(movieID, actors)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddMovie provides a mock function with given fields: movie
func (_m *MovieProvider) AddMovie(movie *models.Movie) error {
	ret := _m.Called(movie)

	if len(ret) == 0 {
		panic("no return value specified for AddMovie")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Movie) error); ok {
		r0 = rf(movie)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMovie provides a mock function with given fields: id
func (_m *MovieProvider) DeleteMovie(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMovie")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditMovie provides a mock function with given fields: movie
func (_m *MovieProvider) EditMovie(movie *models.Movie) error {
	ret := _m.Called(movie)

	if len(ret) == 0 {
		panic("no return value specified for EditMovie")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Movie) error); ok {
		r0 = rf(movie)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMovie provides a mock function with given fields: input
func (_m *MovieProvider) GetMovie(input string) ([]*models.MovieListing, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for GetMovie")
	}

	var r0 []*models.MovieListing
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*models.MovieListing, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(string) []*models.MovieListing); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.MovieListing)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMoviesSorted provides a mock function with given fields: sortBy, sortDirection
func (_m *MovieProvider) GetMoviesSorted(sortBy string, sortDirection string) ([]*models.MovieListing, error) {
	ret := _m.Called(sortBy, sortDirection)

	if len(ret) == 0 {
		panic("no return value specified for GetMoviesSorted")
	}

	var r0 []*models.MovieListing
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]*models.MovieListing, error)); ok {
		return rf(sortBy, sortDirection)
	}
	if rf, ok := ret.Get(0).(func(string, string) []*models.MovieListing); ok {
		r0 = rf(sortBy, sortDirection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.MovieListing)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(sortBy, sortDirection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMovieProvider creates a new instance of MovieProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMovieProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MovieProvider {
	mock := &MovieProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
