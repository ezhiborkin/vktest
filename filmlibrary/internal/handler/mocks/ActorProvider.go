// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	models "filmlibrary/internal/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// ActorProvider is an autogenerated mock type for the ActorProvider type
type ActorProvider struct {
	mock.Mock
}

// AddActor provides a mock function with given fields: actor
func (_m *ActorProvider) AddActor(actor *models.Actor) error {
	ret := _m.Called(actor)

	if len(ret) == 0 {
		panic("no return value specified for AddActor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Actor) error); ok {
		r0 = rf(actor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddMoviesToActor provides a mock function with given fields: actorID, movies
func (_m *ActorProvider) AddMoviesToActor(actorID int64, movies []int64) error {
	ret := _m.Called(actorID, movies)

	if len(ret) == 0 {
		panic("no return value specified for AddMoviesToActor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, []int64) error); ok {
		r0 = rf(actorID, movies)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteActor provides a mock function with given fields: id
func (_m *ActorProvider) DeleteActor(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteActor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditActor provides a mock function with given fields: actor
func (_m *ActorProvider) EditActor(actor *models.Actor) error {
	ret := _m.Called(actor)

	if len(ret) == 0 {
		panic("no return value specified for EditActor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Actor) error); ok {
		r0 = rf(actor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActors provides a mock function with given fields:
func (_m *ActorProvider) GetActors() ([]*models.ActorListing, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActors")
	}

	var r0 []*models.ActorListing
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.ActorListing, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.ActorListing); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ActorListing)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewActorProvider creates a new instance of ActorProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewActorProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ActorProvider {
	mock := &ActorProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
